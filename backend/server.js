// server.js - ES Modules –≤–µ—Ä—Å–∏—è –¥–ª—è Render
import express from 'express';
import cors from 'cors';

const app = express();
const PORT = process.env.PORT || 10000;

// ================================================================
// CORS –ù–ê–°–¢–†–û–ô–ö–ò
// ================================================================

const allowedOrigins = [
  'https://gnome-horoscope-react.vercel.app',
  'https://gnome-horoscope.vercel.app', 
  'https://web.telegram.org',
  'https://telegram.org',
  'http://localhost:3000',
  'http://localhost:3001',
  'http://127.0.0.1:3000'
];

const corsOptions = {
  origin: function (origin, callback) {
    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin
    if (!origin) return callback(null, true);
    
    if (allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.log('üö´ CORS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è:', origin);
      callback(null, true); // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: [
    'Content-Type',
    'Authorization', 
    'X-Requested-With',
    'Accept',
    'Origin'
  ],
  credentials: false,
  optionsSuccessStatus: 200
};

app.use(cors(corsOptions));

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
app.use((req, res, next) => {
  const origin = req.headers.origin;
  
  if (allowedOrigins.includes(origin) || !origin) {
    res.header('Access-Control-Allow-Origin', origin || '*');
  }
  
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With, Accept, Origin');
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ OPTIONS preflight –æ—Ç:', origin);
    return res.sendStatus(200);
  }
  
  next();
});

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path} –æ—Ç ${req.headers.origin || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
  next();
});

// ================================================================
// –î–ê–ù–ù–´–ï –ò –£–¢–ò–õ–ò–¢–´
// ================================================================

const ZODIAC_SIGNS = [
  '–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã', '–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞',
  '–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü', '–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã'
];

const GNOME_NAMES = {
  '–û–≤–µ–Ω': '–ì–Ω–æ–º –û–≥–Ω–µ–±–æ—Ä–æ–¥',
  '–¢–µ–ª–µ—Ü': '–ì–Ω–æ–º –ó–ª–∞—Ç–æ—Ä—É–¥',
  '–ë–ª–∏–∑–Ω–µ—Ü—ã': '–ì–Ω–æ–º –î–≤–æ–π–Ω—è—à–∫–∞',
  '–†–∞–∫': '–ì–Ω–æ–º –î–æ–º–æ–≤–æ–π',
  '–õ–µ–≤': '–ì–Ω–æ–º –ó–ª–∞—Ç–æ–≥—Ä–∏–≤',
  '–î–µ–≤–∞': '–ì–Ω–æ–º –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–π',
  '–í–µ—Å—ã': '–ì–Ω–æ–º –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π',
  '–°–∫–æ—Ä–ø–∏–æ–Ω': '–ì–Ω–æ–º –¢–∞–π–Ω–æ–≤–µ–¥',
  '–°—Ç—Ä–µ–ª–µ—Ü': '–ì–Ω–æ–º –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫',
  '–ö–æ–∑–µ—Ä–æ–≥': '–ì–Ω–æ–º –ì–æ—Ä–æ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª—å',
  '–í–æ–¥–æ–ª–µ–π': '–ì–Ω–æ–º –ò–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å',
  '–†—ã–±—ã': '–ì–Ω–æ–º –ú–µ—á—Ç–∞—Ç–µ–ª—å'
};

const generateHoroscope = (sign) => {
  const predictions = [
    "–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞—à–∏–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–Ω—Ç—É–∏—Ü–∏–∏!",
    "–î–µ–Ω—å –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ù–µ –±–æ–π—Ç–µ—Å—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥.",
    "–ì–Ω–æ–º—å—è –º—É–¥—Ä–æ—Å—Ç—å –≥–æ–≤–æ—Ä–∏—Ç: —Ç–µ—Ä–ø–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã.",
    "–≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.",
    "–°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –ø—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É."
  ];
  
  const love = [
    "–í –ª—é–±–≤–∏ –∂–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã",
    "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ",
    "–í—Ä–µ–º—è —É–∫—Ä–µ–ø–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
  ];
  
  const work = [
    "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏",
    "–ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–∏–Ω–µ—Å—É—Ç —É—Å–ø–µ—Ö",
    "–ö–æ–ª–ª–µ–≥–∏ –æ—Ü–µ–Ω—è—Ç –≤–∞—à–∏ —Ç–∞–ª–∞–Ω—Ç—ã"
  ];
  
  const health = [
    "–≠–Ω–µ—Ä–≥–∏—è –±—å–µ—Ç –∫–ª—é—á–æ–º",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–π–¥–µ—Ç –Ω–∞ –ø–æ–ª—å–∑—É",
    "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π —É–∫—Ä–µ–ø–∏—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç"
  ];

  return {
    general: predictions[Math.floor(Math.random() * predictions.length)],
    love: love[Math.floor(Math.random() * love.length)],
    work: work[Math.floor(Math.random() * work.length)],
    health: health[Math.floor(Math.random() * health.length)]
  };
};

// ================================================================
// API ENDPOINTS
// ================================================================

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'üßô‚Äç‚ôÇÔ∏è API –ì–Ω–æ–º–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    version: '2.1.0',
    endpoints: [
      'GET /api/moon - –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å',
      'GET /api/horoscope/:sign - –ì–æ—Ä–æ—Å–∫–æ–ø',
      'GET /api/astro-events - –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è',
      'POST /api/numerology - –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è',
      'GET /api/compatibility/:sign1/:sign2 - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
      'GET /api/day-card - –ö–∞—Ä—Ç–∞ –¥–Ω—è',
      'GET /api/mercury - –°—Ç–∞—Ç—É—Å –ú–µ—Ä–∫—É—Ä–∏—è'
    ],
    timestamp: new Date().toISOString()
  });
});

// üåô –õ—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å  
app.get('/api/moon', (req, res) => {
  try {
    const today = new Date();
    
    const currentPhase = {
      phase: '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
      emoji: 'üåî',
      illumination: 25,
      age: 5,
      date: today.toISOString(),
      zodiacSign: '–í–µ—Å—ã',
      moonrise: '06:45',
      moonset: '19:30'
    };
    
    const calendar = [];
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      calendar.push({
        date: date.toISOString(),
        displayDate: date.toLocaleDateString('ru-RU', { 
          weekday: 'short', 
          day: 'numeric', 
          month: 'short' 
        }),
        phase: i === 0 ? '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞' : '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
        emoji: 'üåî',
        illumination: Math.round(25 + i * 5),
        age: Math.max(1, Math.min(29, 5 + i))
      });
    }
    
    const advice = {
      title: '–í—Ä–µ–º—è —Ä–æ—Å—Ç–∞ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏',
      text: '–ì–Ω–æ–º –ú—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç—É–µ—Ç: —Ä–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞ –¥–∞–µ—Ç —Å–∏–ª—É –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.',
      activities: ['–ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã', '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥', '–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è'],
      avoid: ['–ò–∑–ª–∏—à–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ']
    };
    
    currentPhase.advice = advice;
    
    res.json({
      current: currentPhase,
      calendar,
      source: 'gnome_astronomy',
      note: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≥–Ω–æ–º—å–∏—Ö –º—É–¥—Ä–µ—Ü–æ–≤',
      lastUpdated: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/moon:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª—É–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      message: error.message
    });
  }
});

// üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø
app.get('/api/horoscope/:sign', (req, res) => {
  try {
    const sign = decodeURIComponent(req.params.sign);
    
    if (!ZODIAC_SIGNS.includes(sign)) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞',
        validSigns: ZODIAC_SIGNS
      });
    }
    
    const horoscope = generateHoroscope(sign);
    const gnomeName = GNOME_NAMES[sign];
    
    res.json({
      sign: sign,
      gnome: gnomeName,
      date: new Date().toLocaleDateString('ru-RU'),
      horoscope: horoscope,
      luckyNumber: Math.floor(Math.random() * 100) + 1,
      luckyColor: ['–ó–æ–ª–æ—Ç–æ–π', '–ò–∑—É–º—Ä—É–¥–Ω—ã–π', '–°–∞–ø—Ñ–∏—Ä–æ–≤—ã–π'][Math.floor(Math.random() * 3)],
      compatibility: ZODIAC_SIGNS[Math.floor(Math.random() * ZODIAC_SIGNS.length)],
      source: 'gnome_wisdom',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/horoscope:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø',
      message: error.message
    });
  }
});

// üåå –ê—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è
app.get('/api/astro-events', (req, res) => {
  try {
    const events = [
      {
        date: '2025-08-28',
        title: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –í–µ–Ω–µ—Ä—ã –∏ –ú–∞—Ä—Å–∞',
        description: '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ª—é–±–æ–≤–Ω—ã—Ö –¥–µ–ª',
        type: 'planetary',
        impact: 'positive'
      },
      {
        date: '2025-08-30',
        title: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ –≤ –†—ã–±–∞—Ö', 
        description: '–í—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ª –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏',
        type: 'lunar',
        impact: 'neutral'
      },
      {
        date: '2025-09-02',
        title: '–¢—Ä–∏–≥–æ–Ω –Æ–ø–∏—Ç–µ—Ä–∞ –∏ –°–æ–ª–Ω—Ü–∞',
        description: '–£–¥–∞—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞',
        type: 'planetary',
        impact: 'positive'
      }
    ];
    
    res.json({
      events: events,
      source: 'astronomy_data',
      generated_at: new Date().toISOString(),
      note: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è',
      total_events: events.length
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/astro-events:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è',
      message: error.message
    });
  }
});

// üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è
app.post('/api/numerology', (req, res) => {
  try {
    const { birthDate, name } = req.body;
    
    if (!birthDate) {
      return res.status(400).json({
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
        example: '1990-05-15'
      });
    }
    
    const dateSum = birthDate.replace(/\D/g, '').split('').reduce((sum, digit) => sum + parseInt(digit), 0);
    const destinyNumber = dateSum > 9 ? dateSum.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0) : dateSum;
    
    const interpretations = {
      1: '–õ–∏–¥–µ—Ä, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π, –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π',
      2: '–î–∏–ø–ª–æ–º–∞—Ç, –º–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π', 
      3: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π',
      4: '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π',
      5: '–°–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π',
      6: '–ó–∞–±–æ—Ç–ª–∏–≤—ã–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å–µ–º–µ–π–Ω—ã–π',
      7: '–ú—ã—Å–ª–∏—Ç–µ–ª—å, –¥—É—Ö–æ–≤–Ω—ã–π, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π',
      8: '–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π',
      9: '–ì—É–º–∞–Ω–∏—Å—Ç, —â–µ–¥—Ä—ã–π, –º—É–¥—Ä—ã–π'
    };
    
    res.json({
      birthDate: birthDate,
      name: name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      destinyNumber: destinyNumber,
      interpretation: interpretations[destinyNumber] || '–û—Å–æ–±–µ–Ω–Ω–∞—è –¥—É—à–∞',
      advice: '–°–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–µ–º—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é!',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/numerology:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—é',
      message: error.message
    });
  }
});

// üíï –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
app.get('/api/compatibility/:sign1/:sign2', (req, res) => {
  try {
    const sign1 = decodeURIComponent(req.params.sign1);
    const sign2 = decodeURIComponent(req.params.sign2);
    
    if (!ZODIAC_SIGNS.includes(sign1) || !ZODIAC_SIGNS.includes(sign2)) {
      return res.status(400).json({
        error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞',
        validSigns: ZODIAC_SIGNS
      });
    }
    
    const compatibilityScore = Math.floor(Math.random() * 41) + 60;
    
    res.json({
      sign1: sign1,
      sign2: sign2,
      gnome1: GNOME_NAMES[sign1],
      gnome2: GNOME_NAMES[sign2],
      compatibilityScore: compatibilityScore,
      description: '–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤ –ª—é–±–≤–∏ –∏ –¥—Ä—É–∂–±–µ.',
      advice: '–¶–µ–Ω–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ —Ä–æ–º–∞–Ω—Ç–∏–∫–µ!',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/compatibility:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
      message: error.message
    });
  }
});

// üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è
app.get('/api/day-card', (req, res) => {
  try {
    const cards = [
      { name: '–ú–∞–≥', meaning: '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è', advice: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã' },
      { name: '–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞', meaning: '–ò–Ω—Ç—É–∏—Ü–∏—è –∏ —Å–∫—Ä—ã—Ç—ã–µ –∑–Ω–∞–Ω–∏—è', advice: '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É' },
      { name: '–°–æ–ª–Ω—Ü–µ', meaning: '–†–∞–¥–æ—Å—Ç—å, —É—Å–ø–µ—Ö –∏ –∂–∏–∑–Ω–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è', advice: '–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–æ–º–µ–Ω—Ç–æ–º' }
    ];
    
    const todayCard = cards[Math.floor(Math.random() * cards.length)];
    
    res.json({
      card: todayCard,
      date: new Date().toLocaleDateString('ru-RU'),
      type: 'daily_guidance',
      gnomeWisdom: '–î—Ä–µ–≤–Ω–∏–µ –≥–Ω–æ–º—ã –≥–æ–≤–æ—Ä—è—Ç: –∫–∞—Ä—Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—à–∏–±–∞—é—Ç—Å—è.',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/day-card:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è',
      message: error.message
    });
  }
});

// ü™ê –°—Ç–∞—Ç—É—Å –ú–µ—Ä–∫—É—Ä–∏—è
app.get('/api/mercury', (req, res) => {
  try {
    const isRetrograde = Math.random() > 0.7;
    
    res.json({
      isRetrograde: isRetrograde,
      status: isRetrograde ? '–†–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π' : '–î–∏—Ä–µ–∫—Ç–Ω—ã–π',
      influence: isRetrograde ? '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö' : '–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—â–µ–Ω–∏—è',
      advice: isRetrograde 
        ? '–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–≤–∞–∂–¥—ã'
        : '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤',
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /api/mercury:', error);
    res.status(500).json({ 
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ú–µ—Ä–∫—É—Ä–∏—è',
      message: error.message
    });
  }
});

// ================================================================
// –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
// ================================================================

app.use('/api/*', (req, res) => {
  res.status(404).json({
    error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.path
  });
});

app.use((error, req, res, next) => {
  console.error('–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? error.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

// ================================================================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ================================================================

app.listen(PORT, () => {
  console.log(`üßô‚Äç‚ôÇÔ∏è –°–µ—Ä–≤–µ—Ä "–ì–Ω–æ–º–∏–π –ì–æ—Ä–æ—Å–∫–æ–ø" –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–æ–≤:', allowedOrigins);
  console.log('üì± –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram WebApp');
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  process.exit(0);
});
