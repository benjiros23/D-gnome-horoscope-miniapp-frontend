import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import dotenv from 'dotenv';

// Загружаем переменные окружения
dotenv.config();

const app = express();
const PORT = process.env.PORT || 10000;

// Middleware
app.use(helmet());
app.use(compression());
app.use(cors({
  origin: [
    'http://localhost:3000',
    'https://web.telegram.org',
    'https://d-gnome-horoscope-miniapp-frontend.vercel.app',
    process.env.FRONTEND_URL
  ].filter(Boolean),
  methods: ['GET', 'POST', 'OPTIONS'],
  credentials: true
}));

app.use(express.json({ limit: '10mb' }));
app.options('*', cors());

// Логирование запросов
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Данные гороскопов
const horoscopeTexts = {
  'Овен': [
    'Гном Огнебород советует быть смелее в принятии решений сегодня! Ваша энергия зажжет новые возможности.',
    'Кузнечная наковальня готова принять новые идеи. Время действовать решительно и не бояться первых шагов!',
    'Огненная энергия поможет преодолеть любые препятствия. Ваша страсть откроет неожиданные двери.',
    'Марс благословляет ваши начинания. Смелость и решительность приведут к долгожданному успеху!'
  ],
  'Телец': [
    'Гном Златоруд обнаружил новые сокровища терпения. Настойчивость принесет желаемые плоды в ближайшее время.',
    'Земная мудрость подсказывает: лучше медленно, но верно. Стабильность - ваша главная сила сегодня.',
    'Гномьи богатства приумножатся благодаря упорству. Материальный мир готов одарить вас щедро.',
    'Венера дарит гармонию и красоту. Наслаждайтесь простыми радостями жизни.'
  ],
  'Близнецы': [
    'Гном Двойняшка записал новую мудрость в летописи. Общение откроет неожиданные двери и возможности.',
    'Любознательность приведет к интересным открытиям. Задавайте больше вопросов - информация ваше оружие!',
    'Ветер перемен принесет новые знания. Будьте открыты для обмена идеями и опытом.',
    'Меркурий активизирует ваш ум. Время для обучения и новых контактов!'
  ],
  'Рак': [
    'Гном Домовой укрепляет семейный очаг. Забота о близких принесет взаимную теплоту и понимание.',
    'Интуиция подскажет правильный путь сегодня. Доверьтесь внутреннему голосу в важных решениях.',
    'Эмоциональная глубина поможет понять истинные мотивы окружающих людей.',
    'Луна освещает путь к душевному покою. Время заботы о себе и близких.'
  ],
  'Лев': [
    'Гном Златогрив созывает совет! Ваше лидерство вдохновит других на великие дела и достижения.',
    'Королевское величие проявится в благородных поступках. Будьте щедрыми - доброта вернется сторицей.',
    'Творческая энергия льется рекой. Самовыражение принесет радость и признание окружающих.',
    'Солнце освещает ваш путь к славе. Время блистать и вдохновлять других!'
  ],
  'Дева': [
    'Гном Аккуратный наточил все инструменты. Внимание к деталям приведет к совершенству в делах.',
    'Практическая мудрость поможет навести порядок. Системный подход принесет желаемый результат.',
    'Трудолюбие и точность откроют путь к долгожданному успеху. Каждая мелочь имеет значение.',
    'Меркурий дарит аналитический ум. Время для планирования и организации!'
  ],
  'Весы': [
    'Гном Справедливый взвешивает все за и против. Гармония возможна в любой сложной ситуации.',
    'Дипломатический подход разрешит старые конфликты. Ищите компромиссы для всех сторон.',
    'Красота и баланс войдут в жизнь через искусство и отношения с людьми.',
    'Венера приносит гармонию в отношения. Время для любви и творчества!'
  ],
  'Скорпион': [
    'Гном Тайновед раскрывает древние секреты. Глубокие истины станут ясными для проницательного ума.',
    'Трансформация начинается изнутри. Примите перемены с мужеством - они приведут к росту.',
    'Интуитивные озарения помогут понять скрытые мотивы и найти истину.',
    'Плутон дарит силу преображения. Время избавиться от старого и принять новое!'
  ],
  'Стрелец': [
    'Гном Путешественник указывает новый маршрут! Приключения ждут за горизонтом - расширяйте границы.',
    'Философская мудрость расширит понимание мира. Учитесь у каждого встречного человека.',
    'Свобода духа поможет преодолеть ограничения. Не позволяйте никому ограничивать мечты.',
    'Юпитер открывает новые горизонты. Время для путешествий и познания!'
  ],
  'Козерог': [
    'Гном Горовосходитель покорил новую вершину! Целеустремленность приведет к заветной цели.',
    'Дисциплина и терпение - верные спутники успеха. Медленно, но верно идите к мечте.',
    'Авторитет растет благодаря надежности. На вас можно положиться в любой ситуации.',
    'Сатурн учит терпению и мудрости. Время строить прочный фундамент будущего!'
  ],
  'Водолей': [
    'Гном Изобретатель создал новое чудо! Инновации изменят привычный порядок вещей к лучшему.',
    'Независимость мышления откроет уникальные возможности. Не бойтесь быть не таким как все.',
    'Дружеские связи принесут поддержку и вдохновение. Коллективная работа даст результаты.',
    'Уран приносит озарения и открытия. Время для инноваций и дружбы!'
  ],
  'Рыбы': [
    'Гном Мечтатель поймал золотую рыбку желаний! Творчество исполнит самые смелые мечты.',
    'Эмпатия и сострадание создадут глубокие связи. Ваша доброта не останется незамеченной.',
    'Интуитивные способности помогут почувствовать скрытые течения судьбы и найти путь.',
    'Нептун дарит вдохновение и мечты. Время для творчества и духовного роста!'
  ]
};

const dayCards = [
  { title: 'Молот Творца', text: 'Сегодня вы обладаете силой создавать и изменять. Используйте эту энергию мудро для великих дел!' },
  { title: 'Кристалл Мудрости', text: 'Ясность мысли поможет найти решение любой задачи. Доверьтесь внутренней мудрости гномов.' },
  { title: 'Щит Защиты', text: 'Вы под надежной защитой древних духов. Смело идите вперед, не боясь препятствий.' },
  { title: 'Зелье Удачи', text: 'Фортуна особенно благосклонна к вам! Отличный день для новых начинаний и смелых решений.' },
  { title: 'Ключ Возможностей', text: 'Перед вами открываются новые двери. Будьте готовы к неожиданным переменам к лучшему.' },
  { title: 'Амулет Силы', text: 'Внутренняя сила поможет преодолеть любые трудности. Вы сильнее, чем думаете!' },
  { title: 'Компас Судьбы', text: 'Путь становится яснее. Доверьтесь интуиции - она приведет вас к цели.' },
  { title: 'Чаша Изобилия', text: 'Изобилие во всех сферах жизни. Щедро делитесь своими дарами с окружающими.' }
];

const adviceTexts = [
  'Помните: каждый великий гном начинал с малого. Великие дела складываются из маленьких шагов.',
  'Мудрый гном знает: лучше один раз увидеть, чем сто раз услышать. Действуйте!',
  'В кузнице жизни каждый удар молота важен. Не пренебрегайте мелочами - они формируют будущее.',
  'Золото не ржавеет, а доброта не стареет. Будьте добрыми к окружающим - это лучшая инвестиция.',
  'Терпение гнома глубже самой глубокой шахты. Умейте ждать подходящего момента.',
  'Даже самый маленький гном может сдвинуть гору, если знает точку опоры. Найдите свою силу.',
  'Дружба дороже любого самоцвета в сокровищнице. Берегите тех, кто рядом с вами.',
  'Смех продлевает жизнь гнома на сто лет. Находите радость в простых вещах.',
  'Честность - лучшая кирка для добычи истины. Будьте искренними с собой и другими.',
  'Мудрость приходит не с годами, а с опытом. Учитесь на каждой ошибке и победе.'
];

// Лунные данные
const moonPhases = [
  { phase: 'Новолуние', emoji: '🌑', illumination: 2 },
  { phase: 'Молодая луна', emoji: '🌒', illumination: 15 },
  { phase: 'Первая четверть', emoji: '🌓', illumination: 50 },
  { phase: 'Растущая луна', emoji: '🌔', illumination: 75 },
  { phase: 'Полнолуние', emoji: '🌕', illumination: 98 },
  { phase: 'Убывающая луна', emoji: '🌖', illumination: 75 },
  { phase: 'Последняя четверть', emoji: '🌗', illumination: 50 },
  { phase: 'Старая луна', emoji: '🌘', illumination: 15 }
];

// Утилиты
function getRandomItem(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function calculateLifeNumber(birthDate) {
  const digits = birthDate.replace(/-/g, '').split('').map(Number);
  let sum = digits.reduce((a, b) => a + b, 0);
  while (sum > 9) {
    sum = sum.toString().split('').map(Number).reduce((a, b) => a + b, 0);
  }
  return sum;
}

// API Routes

// Проверка здоровья API
app.get('/', (req, res) => {
  res.json({
    message: '🧙‍♂️ Гномий Гороскоп API работает!',
    version: '2.0.0',
    status: 'active',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development',
    endpoints: {
      'GET /api/horoscope?sign=<знак>': 'Получить гороскоп',
      'POST /api/day-card': 'Получить карту дня',
      'GET /api/advice': 'Получить совет дня',
      'POST /api/numerology': 'Нумерологический расчет',
      'POST /api/compatibility': 'Совместимость знаков',
      'GET /api/moon': 'Лунный календарь',
      'GET /api/mercury': 'Статус Меркурия'
    }
  });
});

// Получить гороскоп
app.get('/api/horoscope', (req, res) => {
  try {
    const { sign } = req.query;
    
    if (!sign || !horoscopeTexts[sign]) {
      return res.status(400).json({
        error: 'Некорректный знак зодиака',
        supportedSigns: Object.keys(horoscopeTexts),
        message: 'Пожалуйста, укажите корректный знак зодиака'
      });
    }
    
    const text = getRandomItem(horoscopeTexts[sign]);
    
    // Добавляем дополнительную информацию
    const extras = {
      mood: getRandomItem(['Энергичное', 'Спокойное', 'Творческое', 'Романтичное', 'Деловое']),
      luckyNumber: Math.floor(Math.random() * 100) + 1,
      color: getRandomItem(['#8BC34A', '#FFC107', '#FF9800', '#2196F3', '#9C27B0', '#F44336'])
    };
    
    res.json({
      sign,
      text,
      date: new Date().toISOString(),
      type: 'horoscope',
      source: 'internet',
      ...extras
    });
    
  } catch (error) {
    console.error('Ошибка в /api/horoscope:', error);
    res.status(500).json({ 
      error: 'Не удалось получить гороскоп',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});

// Получить карту дня
app.post('/api/day-card', (req, res) => {
  try {
    const card = getRandomItem(dayCards);
    
    res.json({
      ...card,
      date: new Date().toISOString(),
      type: 'day-card',
      source: 'internet',
      wisdom: 'Мудрость древних гномов всегда с вами! 🧙‍♂️'
    });
    
  } catch (error) {
    console.error('Ошибка в /api/day-card:', error);
    res.status(500).json({ 
      error: 'Не удалось получить карту дня',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});

// Получить совет дня
app.get('/api/advice', (req, res) => {
  try {
    const advice = getRandomItem(adviceTexts);
    
    res.json({
      text: advice + ' 🧙‍♂️',
      date: new Date().toISOString(),
      type: 'advice',
      source: 'internet',
      category: 'daily-wisdom'
    });
    
  } catch (error) {
    console.error('Ошибка в /api/advice:', error);
    res.status(500).json({ 
      error: 'Не удалось получить совет',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});

// Лунный календарь
app.get('/api/moon', (req, res) => {
  try {
    // Получаем "семя" на основе текущей даты для стабильности
    const today = new Date();
    const dateString = today.toISOString().split('T')[0]; // "2025-08-25"
    const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
    
    // Детерминированный выбор фазы на основе дня года
    const phaseIndex = dayOfYear % moonPhases.length;
    const currentPhase = moonPhases[phaseIndex];
    
    // Стабильные данные для всего дня
    const baseNumber = dayOfYear * 7; // Используем день года как базу
    
    // Генерируем календарь на неделю (стабильно для этого дня)
    const calendar = [];
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dayNum = Math.floor((date - new Date(date.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
      const phaseIdx = dayNum % moonPhases.length;
      
      calendar.push({
        date: date.toISOString(),
        displayDate: date.toLocaleDateString('ru-RU', { 
          weekday: 'short', 
          day: 'numeric', 
          month: 'short' 
        }),
        ...moonPhases[phaseIdx],
        age: (dayNum % 29) + 1 // Стабильный возраст луны
      });
    }
    
    // Советы гномов по фазам
    const adviceMap = {
      'Новолуние': {
        title: 'Время новых начинаний',
        text: 'Гном Мечтатель советует: сейчас лучшее время для планирования и новых идей. Луна скрыта, но энергия роста уже накапливается.',
        activities: ['Планирование', 'Медитация', 'Постановка целей'],
        avoid: ['Важные решения', 'Крупные покупки']
      },
      'Молодая луна': {
        title: 'Время роста и действий',
        text: 'Гном Труженик говорит: пора воплощать задуманное! Растущая луна поддержит ваши начинания.',
        activities: ['Новые проекты', 'Обучение', 'Физическая активность'],
        avoid: ['Конфликты', 'Спешка']
      },
      'Первая четверть': {
        title: 'Время преодоления препятствий',
        text: 'Гном Воин напоминает: это период вызовов. Проявите решительность и преодолейте трудности.',
        activities: ['Решение проблем', 'Тренировки', 'Важные разговоры'],
        avoid: ['Откладывание дел', 'Сомнения']
      },
      'Растущая луна': {
        title: 'Время накопления сил',
        text: 'Гном Мудрый советует: продолжайте начатое, энергия растет. Время благоприятно для развития.',
        activities: ['Развитие навыков', 'Укрепление отношений', 'Творчество'],
        avoid: ['Излишества', 'Переутомление']
      },
      'Полнолуние': {
        title: 'Пик энергии и завершений',
        text: 'Гном Маг предупреждает: максимум лунной силы! Завершайте дела, но будьте осторожны с эмоциями.',
        activities: ['Завершение проектов', 'Празднование', 'Благодарность'],
        avoid: ['Импульсивность', 'Конфликты', 'Алкоголь']
      },
      'Убывающая луна': {
        title: 'Время освобождения',
        text: 'Гном Целитель советует: пора избавляться от лишнего. Отпустите то, что не служит вам.',
        activities: ['Очищение', 'Прощение', 'Избавление от хлама'],
        avoid: ['Новые обязательства', 'Накопительство']
      },
      'Последняя четверть': {
        title: 'Время переосмысления',
        text: 'Гном Философ размышляет: анализируйте опыт и делайте выводы. Мудрость приходит через осознание.',
        activities: ['Анализ', 'Планирование будущего', 'Обучение'],
        avoid: ['Поспешные решения', 'Критика']
      },
      'Старая луна': {
        title: 'Время подготовки к новому',
        text: 'Гном Мудрец шепчет: скоро новый цикл. Отдохните и подготовьтесь к новым свершениям.',
        activities: ['Отдых', 'Медитация', 'Завершение дел'],
        avoid: ['Стресс', 'Новые начинания']
      }
    };
    
    const advice = adviceMap[currentPhase.phase] || adviceMap['Новолуние'];
    
    // Стабильные следующие фазы (детерминированно на основе даты)
    const nextFullMoonDays = 15 - (dayOfYear % 15);
    const nextNewMoonDays = 30 - (dayOfYear % 30);
    
    const nextFullMoon = new Date(today);
    nextFullMoon.setDate(today.getDate() + nextFullMoonDays);
    
    const nextNewMoon = new Date(today);
    nextNewMoon.setDate(today.getDate() + nextNewMoonDays);
    
    res.json({
      current: {
        ...currentPhase,
        age: (dayOfYear % 29) + 1,
        date: today.toISOString(),
        advice
      },
      calendar,
      moonrise: '06:45',
      moonset: '19:30',
      nextFullMoon: nextFullMoon.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' }),
      nextNewMoon: nextNewMoon.toLocaleDateString('ru-RU', { day: 'numeric', month: 'long' }),
      source: 'internet',
      cached_until: `${dateString}T23:59:59.999Z` // Показываем до когда актуальны данные
    });
    
  } catch (error) {
    console.error('Ошибка в /api/moon:', error);
    res.status(500).json({ 
      error: 'Не удалось получить лунные данные',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});


// Нумерология
app.post('/api/numerology', (req, res) => {
  try {
    const { birthDate } = req.body;
    
    if (!birthDate) {
      return res.status(400).json({ 
        error: 'Дата рождения обязательна',
        message: 'Пожалуйста, укажите дату рождения в формате YYYY-MM-DD'
      });
    }
    
    const lifeNumber = calculateLifeNumber(birthDate);
    const numerologyData = {
      1: { character: 'Лидер и первопроходец. Независимый и инициативный.', destiny: 'Создавать новое и вести людей за собой.' },
      2: { character: 'Миротворец и дипломат. Гармония - ваша суперсила.', destiny: 'Объединять людей и создавать баланс.' },
      3: { character: 'Творец и вдохновитель. Креативность в крови.', destiny: 'Нести красоту и радость через искусство.' },
      4: { character: 'Строитель и организатор. Надежность - основа.', destiny: 'Создавать прочные основы для будущего.' },
      5: { character: 'Искатель приключений. Перемены - стихия.', destiny: 'Исследовать мир и делиться опытом.' },
      6: { character: 'Заботливый защитник семьи. Любовь - сила.', destiny: 'Нести заботу и исцеление людям.' },
      7: { character: 'Мудрец и исследователь истины. Духовность.', destiny: 'Открывать тайны и делиться мудростью.' },
      8: { character: 'Материалист и организатор. Успех через труд.', destiny: 'Достичь благополучия и помочь другим.' },
      9: { character: 'Гуманист и альтруист. Служение людям.', destiny: 'Нести свет знаний всему человечеству.' }
    };
    
    const data = numerologyData[lifeNumber];
    
    res.json({
      number: lifeNumber,
      ...data,
      birthDate,
      source: 'internet',
      calculation: 'Гномья нумерология по древним методам'
    });
    
  } catch (error) {
    console.error('Ошибка в /api/numerology:', error);
    res.status(500).json({ 
      error: 'Не удалось рассчитать нумерологию',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});

// Совместимость
app.post('/api/compatibility', (req, res) => {
  try {
    const { sign1, sign2 } = req.body;
    
    if (!sign1 || !sign2) {
      return res.status(400).json({ 
        error: 'Оба знака зодиака обязательны',
        message: 'Пожалуйста, укажите оба знака зодиака для расчета совместимости'
      });
    }
    
    // Улучшенный алгоритм совместимости
    const compatibilityMatrix = {
      'Овен': { 'Лев': 95, 'Стрелец': 92, 'Близнецы': 88, 'Водолей': 85 },
      'Телец': { 'Дева': 94, 'Козерог': 91, 'Рак': 87, 'Рыбы': 84 },
      'Близнецы': { 'Весы': 93, 'Водолей': 90, 'Овен': 88, 'Лев': 85 },
      'Рак': { 'Скорпион': 96, 'Рыбы': 93, 'Телец': 87, 'Дева': 84 },
      'Лев': { 'Овен': 95, 'Стрелец': 92, 'Близнецы': 85, 'Весы': 82 },
      'Дева': { 'Телец': 94, 'Козерог': 91, 'Рак': 84, 'Скорпион': 81 },
      'Весы': { 'Близнецы': 93, 'Водолей': 90, 'Лев': 82, 'Стрелец': 79 },
      'Скорпион': { 'Рак': 96, 'Рыбы': 93, 'Дева': 81, 'Козерог': 78 },
      'Стрелец': { 'Овен': 92, 'Лев': 92, 'Весы': 79, 'Водолей': 76 },
      'Козерог': { 'Дева': 91, 'Телец': 91, 'Скорпион': 78, 'Рыбы': 75 },
      'Водолей': { 'Близнецы': 90, 'Весы': 90, 'Овен': 85, 'Стрелец': 76 },
      'Рыбы': { 'Скорпион': 93, 'Рак': 93, 'Телец': 84, 'Козерог': 75 }
    };
    
    let percentage = compatibilityMatrix[sign1]?.[sign2] || 
                    compatibilityMatrix[sign2]?.[sign1] || 
                    (Math.floor(Math.random() * 40) + 55);
    
    let emoji = percentage >= 90 ? '💖' : percentage >= 80 ? '💕' : percentage >= 70 ? '❤️' : '💛';
    
    let description;
    if (percentage >= 90) description = 'Идеальная пара! Звезды благословляют ваш союз гармонией и взаимопониманием.';
    else if (percentage >= 80) description = 'Отличная совместимость! Вы прекрасно дополняете друг друга во всех сферах жизни.';
    else if (percentage >= 70) description = 'Хорошие отношения! Немного усилий - и будете неразлучны как гномы в горах.';
    else description = 'Средняя совместимость. Работайте над отношениями вместе - гномья мудрость поможет!';
    
    res.json({
      sign1,
      sign2,
      percentage,
      emoji,
      description,
      source: 'internet',
      advice: 'Помните: любовь преодолевает любые астрологические различия! 💫'
    });
    
  } catch (error) {
    console.error('Ошибка в /api/compatibility:', error);
    res.status(500).json({ 
      error: 'Не удалось рассчитать совместимость',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});

// Статус Меркурия
app.get('/api/mercury', (req, res) => {
  try {
    // Реальные периоды ретроградного Меркурия на 2025 год
    const now = new Date();
    const retrogradeePeriods2025 = [
      { start: new Date('2025-03-15'), end: new Date('2025-04-07') },
      { start: new Date('2025-07-18'), end: new Date('2025-08-11') },
      { start: new Date('2025-11-09'), end: new Date('2025-11-29') }
    ];
    
    const isRetrograde = retrogradeePeriods2025.some(period => 
      now >= period.start && now <= period.end
    );
    
    const nextPeriod = retrogradeePeriods2025.find(period => now < period.start);
    
    res.json({
      isRetrograde,
      period: isRetrograde 
        ? `Ретроградный до ${retrogradeePeriods2025.find(p => now >= p.start && now <= p.end)?.end.toLocaleDateString('ru-RU')}`
        : nextPeriod 
          ? `Директное движение до ${nextPeriod.start.toLocaleDateString('ru-RU')}`
          : 'Директное движение',
      description: isRetrograde 
        ? 'Меркурий ретроградный. Время переосмысления и завершения дел. Будьте внимательны с техникой и документами. Отличный период для медитации и внутренней работы.'
        : 'Меркурий в директном движении. Отличное время для новых начинаний, переговоров, поездок и обучения. Коммуникация течет легко и ясно.',
      date: new Date().toISOString(),
      source: 'internet',
      advice: isRetrograde 
        ? 'Используйте это время для завершения старых дел и внутренней работы. 🔄'
        : 'Время действовать! Заключайте сделки и начинайте новые проекты. ⚡'
    });
    
  } catch (error) {
    console.error('Ошибка в /api/mercury:', error);
    res.status(500).json({ 
      error: 'Не удалось получить статус Меркурия',
      message: 'Произошла внутренняя ошибка сервера'
    });
  }
});

// 404 обработчик для API
app.use('/api/*', (req, res) => {
  res.status(404).json({
    error: 'Эндпоинт не найден',
    message: 'Проверьте правильность URL и метода запроса',
    availableEndpoints: [
      'GET /api/horoscope?sign=<знак>',
      'POST /api/day-card',
      'GET /api/advice', 
      'POST /api/numerology',
      'POST /api/compatibility',
      'GET /api/moon',
      'GET /api/mercury'
    ]
  });
});

// Глобальный обработчик ошибок
app.use((err, req, res, next) => {
  console.error('Глобальная ошибка:', err);
  res.status(500).json({
    error: 'Внутренняя ошибка сервера',
    message: 'Что-то пошло не так. Попробуйте позже.',
    timestamp: new Date().toISOString()
  });
});

// Запуск сервера
app.listen(PORT, () => {
  console.log(`🧙‍♂️ Гномий Гороскоп API запущен на порту ${PORT}`);
  console.log(`🌐 Режим: ${process.env.NODE_ENV || 'development'}`);
  console.log(`📅 Время запуска: ${new Date().toLocaleString('ru-RU')}`);
  console.log(`🔗 Доступно по адресу: http://localhost:${PORT}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n🛑 Получен сигнал SIGINT. Завершаем работу сервера...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n🛑 Получен сигнал SIGTERM. Завершаем работу сервера...');
  process.exit(0);
});

